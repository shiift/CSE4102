(*********************************************************************
 * Name: William Dickson 
 * Class: CSE 4102
 * Instructor: Jeff Meunier
 * Due Date: March 3, 2016
 ********************************************************************)

use "basis.sml";


(*********************************************************************
 * Takes two streams and returns a stream that alternates between
 * the values generated by each stream.
 ********************************************************************)
fun interleave s1 Empty = s1
  | interleave Empty s2 = s2
  | interleave s1 s2 =
      let fun rest () = interleave s2 (tail s1)
      in Stream (head s1, rest)
      end
  ;

(*********************************************************************
 * Takes two streams and returns a stream that returns the elements
 * of both streams joined as tuples.
 ********************************************************************)
fun zip s1 Empty = Empty
  | zip Empty s2 = Empty
  | zip s1 s2 =
      let fun rest () = zip (tail s1) (tail s2)
      in Stream ((head s1, head s2), rest)
      end
  ;

(*********************************************************************
 * Takes an integer, i, and generates a stream that returns integers
 * that are multiples of i starting from 0.
 ********************************************************************)
fun countBy i = generate 0 (inc i);

(*********************************************************************
 * Takes an integer, i, and a stream and returns the ith value of the
 * stream.
 ********************************************************************)
fun nth i s = head (drop (i-1) s);

(*********************************************************************
 * Takes an integer, a, and generates a stream that always returns a.
 ********************************************************************)
fun const a = generate a (inc 0);

(*********************************************************************
 * Converts a list to a stream. Takes a list and returns a stream
 * that returns the elements of the list until the end of the list.
 ********************************************************************)
fun listToStream [] = Empty
  | listToStream (head::tail) = Stream (head, (fn () => listToStream tail))
  ;

(*********************************************************************
 * Converts a stream to a list. Takes a stream and returns a list
 * that contains the elements of the stream until the end of the
 * stream. This function diverges if the stream is unbounded.
 ********************************************************************)
fun streamToList Empty = []
  | streamToList s = (head s)::(streamToList (tail s))
  ;

(*********************************************************************
 * Takes an integer, i, and a stream and returns a stream that will
 * return the first i elements of s.
 ********************************************************************)
fun first 0 s = Empty
  | first i s = Stream (head s, (fn () => first (i-1) (tail s)))
  ;

(*********************************************************************
 * Takes integers, i and j and returns a stream that returns the
 * integers from i to j (inclusive).
 ********************************************************************)
fun fromTo i j = first (j-i+1) (generate i (inc 1));

(*********************************************************************
 * Takes two streams and joins them end-to-end. Returns a stream that
 * will return elements from the first stream until Empty then returns
 * the elements of the second stream.
 ********************************************************************)
fun join Empty s2 = s2
  | join s1 Empty = s1
  | join s1 s2 = Stream (head s1, (fn () => join (tail s1) s2))
  ;

(*********************************************************************
 * Helper function that behaves similarly to join, except that at the
 * end of the second stream, it loops the stream again.
 ********************************************************************)
fun loop' Empty s2 = loop' s2 s2
  | loop' s1 s2 = Stream (head s1, (fn () => loop' (tail s1) s2))
(*********************************************************************
 * Takes a stream and loops the stream indefinitely.
 ********************************************************************)
and loop s = loop' s s
  ;

(*********************************************************************
 * Takes integers, a, c, m, and seed and returns a stream that returns
 * the values of the LCG rand function.
 ********************************************************************)
fun rand a c m seed = 
      let val sd = (a * seed + c) mod m
      in Stream (sd, (fn () => rand a c m sd))
      end
  ;

(*********************************************************************
 * A stream of streams. The ith stream of this stream is a stream that
 * returns values that are multiples of i starting at 0.
 ********************************************************************)
val streams = generate (countBy 1) (fn s => countBy ((nth 2 s)+1));
